/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const HomeLazyImport = createFileRoute('/home')()
const IndexLazyImport = createFileRoute('/')()
const HomeMeLazyImport = createFileRoute('/home/me')()
const HomeFragrancesLazyImport = createFileRoute('/home/fragrances')()
const HomeUserIdLazyImport = createFileRoute('/home/$userId')()

// Create/Update Routes

const HomeLazyRoute = HomeLazyImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/home.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const HomeMeLazyRoute = HomeMeLazyImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => HomeLazyRoute,
} as any).lazy(() => import('./routes/home.me.lazy').then((d) => d.Route))

const HomeFragrancesLazyRoute = HomeFragrancesLazyImport.update({
  id: '/fragrances',
  path: '/fragrances',
  getParentRoute: () => HomeLazyRoute,
} as any).lazy(() =>
  import('./routes/home.fragrances.lazy').then((d) => d.Route),
)

const HomeUserIdLazyRoute = HomeUserIdLazyImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => HomeLazyRoute,
} as any).lazy(() => import('./routes/home.$userId.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeLazyImport
      parentRoute: typeof rootRoute
    }
    '/home/$userId': {
      id: '/home/$userId'
      path: '/$userId'
      fullPath: '/home/$userId'
      preLoaderRoute: typeof HomeUserIdLazyImport
      parentRoute: typeof HomeLazyImport
    }
    '/home/fragrances': {
      id: '/home/fragrances'
      path: '/fragrances'
      fullPath: '/home/fragrances'
      preLoaderRoute: typeof HomeFragrancesLazyImport
      parentRoute: typeof HomeLazyImport
    }
    '/home/me': {
      id: '/home/me'
      path: '/me'
      fullPath: '/home/me'
      preLoaderRoute: typeof HomeMeLazyImport
      parentRoute: typeof HomeLazyImport
    }
  }
}

// Create and export the route tree

interface HomeLazyRouteChildren {
  HomeUserIdLazyRoute: typeof HomeUserIdLazyRoute
  HomeFragrancesLazyRoute: typeof HomeFragrancesLazyRoute
  HomeMeLazyRoute: typeof HomeMeLazyRoute
}

const HomeLazyRouteChildren: HomeLazyRouteChildren = {
  HomeUserIdLazyRoute: HomeUserIdLazyRoute,
  HomeFragrancesLazyRoute: HomeFragrancesLazyRoute,
  HomeMeLazyRoute: HomeMeLazyRoute,
}

const HomeLazyRouteWithChildren = HomeLazyRoute._addFileChildren(
  HomeLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/home': typeof HomeLazyRouteWithChildren
  '/home/$userId': typeof HomeUserIdLazyRoute
  '/home/fragrances': typeof HomeFragrancesLazyRoute
  '/home/me': typeof HomeMeLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/home': typeof HomeLazyRouteWithChildren
  '/home/$userId': typeof HomeUserIdLazyRoute
  '/home/fragrances': typeof HomeFragrancesLazyRoute
  '/home/me': typeof HomeMeLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/home': typeof HomeLazyRouteWithChildren
  '/home/$userId': typeof HomeUserIdLazyRoute
  '/home/fragrances': typeof HomeFragrancesLazyRoute
  '/home/me': typeof HomeMeLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/home' | '/home/$userId' | '/home/fragrances' | '/home/me'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/home' | '/home/$userId' | '/home/fragrances' | '/home/me'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/home/$userId'
    | '/home/fragrances'
    | '/home/me'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  HomeLazyRoute: typeof HomeLazyRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  HomeLazyRoute: HomeLazyRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/home"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/home": {
      "filePath": "home.lazy.tsx",
      "children": [
        "/home/$userId",
        "/home/fragrances",
        "/home/me"
      ]
    },
    "/home/$userId": {
      "filePath": "home.$userId.lazy.tsx",
      "parent": "/home"
    },
    "/home/fragrances": {
      "filePath": "home.fragrances.lazy.tsx",
      "parent": "/home"
    },
    "/home/me": {
      "filePath": "home.me.lazy.tsx",
      "parent": "/home"
    }
  }
}
ROUTE_MANIFEST_END */
